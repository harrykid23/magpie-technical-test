// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String
  roleId          String
  role            Role      @relation(fields: [roleId], references: [id])
  booksCreated    Book[]    @relation("BookCreatedByRelation")
  booksDeleted    Book[]    @relation("BookDeletedByRelation")
  lendingsCreated Lending[] @relation("LendingCreatedByRelation")
  lendingsDeleted Lending[] @relation("LendingDeletedByRelation")
}

model Role {
  id                 String              @id @default(uuid())
  name               String              @unique
  mapRolePermissions MapRolePermission[]
  user               User[]
}

model Permission {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String
  mapRolePermissions MapRolePermission[]
}

model MapRolePermission {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model Member {
  id        String    @id @default(uuid())
  name      String
  email     String
  phone     String?
  createdAt DateTime  @default(now())
  lendings  Lending[]
}

model Book {
  id          String    @id @default(uuid())
  title       String
  author      String
  isbn        String
  quantity    Int
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  createdById String
  createdBy   User      @relation("BookCreatedByRelation", fields: [createdById], references: [id])
  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("BookDeletedByRelation", fields: [deletedById], references: [id])
  lendings    Lending[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  books Book[]
}

model Lending {
  id          String    @id @default(uuid())
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id])
  memberId    String
  member      Member    @relation(fields: [memberId], references: [id])
  dueDate     DateTime
  returnDate  DateTime?
  createdAt   DateTime  @default(now())
  createdById String
  createdBy   User      @relation("LendingCreatedByRelation", fields: [createdById], references: [id])
  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("LendingDeletedByRelation", fields: [deletedById], references: [id])
}
